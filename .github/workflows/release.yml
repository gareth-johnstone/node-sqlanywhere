name: Build and Upload Pre-built Binaries

on:
  push:
    tags:
      - '*.*.*'

jobs:
  build_binaries:
    name: Build Prebuilds (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'

      # Setup for Windows build
      - name: Setup MSBuild and Python for node-gyp
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: microsoft/setup-msbuild@v2
        if: matrix.os == 'windows-latest'

      # Setup for Linux build
      - name: Install build tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y build-essential

      # Install dev dependencies, including 'prebuild'
      - name: Install dependencies
        run: npm install

      # 1. Generate the OS-specific binary in prebuilds/
      - name: Run prebuildify
        run: npm run prebuild

      # 2. Upload the entire prebuilds folder as an artifact.
      # The artifact name must be unique per job.
      - name: Upload Prebuild Artifact
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-${{ matrix.os }}
          path: prebuilds/
          
  # Add a new job to combine and commit the files
  combine_and_commit:
    name: Combine and Commit Binaries
    runs-on: ubuntu-latest
    # Wait for ALL matrix jobs to complete successfully
    needs: [build_binaries]
    
    steps:
      - uses: actions/checkout@v4
        with:
          # A token is required to push changes back to the repo
          token: ${{ secrets.GITHUB_TOKEN }}

      # 1. Download all artifacts created by the matrix jobs
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-prebuilds

      # 2. Move all binary files into the master prebuilds folder
      - name: Consolidate Binaries
        run: |
          mkdir -p prebuilds
          # Loop through each downloaded artifact folder (prebuilds-windows-latest, prebuilds-ubuntu-latest)
          # and move its contents into the main prebuilds folder
          find downloaded-prebuilds -type f -name '*.tar.gz' -exec mv {} prebuilds/ \;

      # 3. Commit the new prebuilds to the Git repository
      - name: Commit and Push Binaries
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          # Check if there are any new or modified files in prebuilds/
          if git diff --quiet prebuilds; then
            echo "No new binaries to commit."
          else
            git add prebuilds
            # Use the latest tag from the repo history for the commit message
            LATEST_VERSION=$(git describe --tags --abbrev=0)
            git commit -m "ci: Prebuilt binaries for ${LATEST_VERSION}"
            git push
          fi