name: Bump Version, Build, Commit, and Release

# This workflow is triggered manually from the Actions tab
on:
  workflow_dispatch:

jobs:
  # This job builds the binaries first, based on the latest master commit
  build_binaries:
    name: Build Prebuilds (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'

      # Setup for Windows build
      - name: Setup MSBuild and Python for node-gyp
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: microsoft/setup-msbuild@v2
        if: matrix.os == 'windows-latest'

      # Setup for Linux build
      - name: Install build tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y build-essential

      # Setup for macOS build
      - name: Install build tools (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          xcode-select --install || echo "Xcode Command Line Tools already installed"

      # Force a clean build to prevent caching issues
      - name: Clean Old Build Artifacts (Linux & macOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: rm -rf build prebuilds

      - name: Clean Old Build Artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: Remove-Item -Recurse -Force build, prebuilds -ErrorAction SilentlyContinue
      
      - name: Install dependencies
        run: npm install --ignore-scripts

      - name: Run prebuildify
        run: npm run prebuild

      - name: Upload Prebuild Artifact
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-${{ matrix.os }}
          path: prebuilds/

  # This job runs after the binaries are built. It combines them, versions,
  # commits, tags, and creates the final release.
  combine_and_release:
    name: Combine, Commit, Tag, and Release
    runs-on: ubuntu-latest
    needs: [build_binaries]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-prebuilds

      - name: Consolidate Binaries
        run: |
          echo "Removing existing prebuilds directory if it exists..."
          rm -rf prebuilds
          mkdir prebuilds
          echo "Copying new binaries from downloaded artifacts..."
          for dir in downloaded-prebuilds/*/; do
            cp -r "$dir"* prebuilds/
          done
          echo "Final consolidated contents of prebuilds directory:"
          ls -R prebuilds/

      - name: Clean Up Artifacts
        run: rm -rf downloaded-prebuilds

      - name: Configure Git User
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Check for Changes
        id: git_status
        run: |
          if git status --porcelain | grep -E " M |^\?\? "; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi
      
      # Stage the new/modified binaries in their own dedicated step.
      - name: Stage Binary Changes
        if: steps.git_status.outputs.changes == 'true'
        run: git add prebuilds

      - name: Version, Commit, and Tag
        id: npm_version
        if: steps.git_status.outputs.changes == 'true'
        run: |
          # 1. Manually get the current version and calculate the next patch version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "Bumping version to $NEW_VERSION"

          # 2. Update package.json with the new version and stage it
          # Using 'jq' is a robust way to edit JSON in bash
          jq --arg newVersion "$NEW_VERSION" '.version = $newVersion' package.json > tmp.json && mv tmp.json package.json
          git add package.json

          # 3. Commit all staged changes (binaries and package.json)
          git commit -m "ci: Bump version to $NEW_VERSION and commit prebuilt binaries"

          # 4. Manually create the Git tag (THIS WAS THE MISSING STEP)
          git tag "v$NEW_VERSION"

          # 5. Push the commit and the new tag
          git push --follow-tags
          
          # 6. Output the new tag for the release step
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        if: steps.npm_version.outputs.tag
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.npm_version.outputs.tag }}
          release_name: Release ${{ steps.npm_version.outputs.tag }}
          body: |
            Automated release with pre-built binaries for Windows and Linux.
          draft: false
          prerelease: false

      - name: No Changes Detected
        if: steps.git_status.outputs.changes == 'false'
        run: echo "No changes to binaries found. Skipping version bump and release."
