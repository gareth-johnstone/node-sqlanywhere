name: Build and Upload Pre-built Binaries

on:
  workflow_dispatch:
  push:
    tags:
      - '*.*.*'

jobs:
  build_binaries:
    name: Build Prebuilds (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'

      # Setup for Windows build
      - name: Setup MSBuild and Python for node-gyp
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: microsoft/setup-msbuild@v2
        if: matrix.os == 'windows-latest'

      # Setup for Linux build
      - name: Install build tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y build-essential

      # Install dev dependencies, including 'prebuild'
      - name: Install dependencies
        run: npm install

      # 1. Generate the OS-specific binary in prebuilds/
      - name: Run prebuildify
        run: npm run prebuild

      # 2. Upload the entire prebuilds folder as an artifact.
      # The artifact name must be unique per job.
      - name: Upload Prebuild Artifact
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-${{ matrix.os }}
          path: prebuilds/
          
  # Add a new job to combine and commit the files
  combine_and_commit:
    name: Combine and Commit Binaries
    runs-on: ubuntu-latest
    # Wait for ALL matrix jobs to complete successfully
    needs: [build_binaries]
    
    steps:
      - uses: actions/checkout@v4
        with:
          # IMPORTANT: Fetch full history so we can commit back to the branch
          fetch-depth: 0 
          token: ${{ secrets.GITHUB_TOKEN }}
          
      # 1. Download all artifacts created by the matrix jobs
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-prebuilds

      # 2. Consolidate Binaries
      - name: Consolidate Binaries
        run: |
          # 1. Create the root directory if it does not exist.
          mkdir -p prebuilds

          # 2. DELETE THE SPECIFIC PLATFORM FOLDERS.
          # This explicitly clears the old directories checked out by Git 
          # and prevents the "cannot overwrite" conflict for the move command.
          rm -rf prebuilds/linux-x64
          rm -rf prebuilds/win32-x64

          # 3. Move the contents of the Ubuntu artifact into the clean prebuilds/ directory.
          # This creates the 'prebuilds/linux-x64' folder.
          mv downloaded-prebuilds/prebuilds-ubuntu-latest/* prebuilds/
          
          # 4. Move the contents of the Windows artifact into the prebuilds/ directory.
          # This creates the 'prebuilds/win32-x64' folder without conflict.
          mv downloaded-prebuilds/prebuilds-windows-latest/* prebuilds/

          echo "Final consolidated contents of prebuilds directory:"
          ls prebuilds/

      # 3. Commit the new prebuilds to the Git repository
      - name: Commit and Push Binaries
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Stage the prebuilds directory. This is where we force Git to notice the changes.
          git add prebuilds
          
          # Check if there are any staged changes. If the output is empty, skip commit.
          if [ -z "$(git status --porcelain)" ]; then
            echo "No new changes to binaries found. Skipping commit and push."
          else
            # 1. Commit the new files on the detached HEAD
            LATEST_VERSION=$(git describe --tags --abbrev=0)
            git commit -m "ci: Prebuilt binaries for ${LATEST_VERSION}"
            
            # 2. Push the newly created commit (from detached HEAD) directly to the master branch.
            # NOTE: If your main branch is named 'main', change 'master' below to 'main'.
            git push origin HEAD:master
          fi
